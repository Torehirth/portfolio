name: Deploy and Auto-Increment Release

permissions:
  id-token: write
  contents: write
  pages: write
  actions: read

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Configure Pages (recommended)
      - name: Configure Pages
        uses: actions/configure-pages@v5

      # 2) (Optional) Build step goes here if you have one
      # - name: Build
      #   run: |
      #     # npm ci
      #     # npm run build

      # 3) Upload the site artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./   # If you later have a build dir, change to ./dist or ./build

  deploy:
    if: github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4  # <-- bumped from v2

  release:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Fetch all tags
        run: git fetch --tags

      # Use $GITHUB_OUTPUT instead of deprecated ::set-output
      - name: Get the latest release tag
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "TAG=$TAG" >> "$GITHUB_OUTPUT"

      - name: Increment patch version
        id: increment_version
        run: |
          TAG=${{ steps.get_tag.outputs.TAG }}
          VERSION=${TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "New version: $NEW_VERSION"

      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.increment_version.outputs.NEW_VERSION }}
          release_name: "Release ${{ steps.increment_version.outputs.NEW_VERSION }}"
          body: "Deployment of version ${{ steps.increment_version.outputs.NEW_VERSION }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push new tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${{ steps.increment_version.outputs.NEW_VERSION }}
          git push origin ${{ steps.increment_version.outputs.NEW_VERSION }}
